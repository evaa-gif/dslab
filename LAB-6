Q1
#include <stdio.h>

#define MAX 20

int isReflexive(int relation[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        if (relation[i][i] != 1)
            return 0;
    }
    return 1;
}

int isSymmetric(int relation[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (relation[i][j] != relation[j][i])
                return 0;
        }
    }
    return 1;
}

int isAntisymmetric(int relation[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i != j && relation[i][j] && relation[j][i])
                return 0;
        }
    }
    return 1;
}

int isTransitive(int relation[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (relation[i][j]) {
                for (int k = 0; k < n; k++) {
                    if (relation[j][k] && !relation[i][k])
                        return 0;
                }
            }
        }
    }
    return 1;
}

int main() {
    int relation[MAX][MAX];
    int n;

    printf("Enter the number of elements in the set: ");
    scanf("%d", &n);

    printf("Enter the relation matrix (%d x %d):\n", n, n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &relation[i][j]);
        }
    }

    printf("\nProperties of the relation:\n");

    if (isReflexive(relation, n))
        printf("Reflexive: Yes\n");
    else
        printf("Reflexive: No\n");

    if (isSymmetric(relation, n))
        printf("Symmetric: Yes\n");
    else
        printf("Symmetric: No\n");

    if (isAntisymmetric(relation, n))
        printf("Antisymmetric: Yes\n");
    else
        printf("Antisymmetric: No\n");

    if (isTransitive(relation, n))
        printf("Transitive: Yes\n");
    else
        printf("Transitive: No\n");

    return 0;
}

Q2
#include <stdio.h>
#include <limits.h>

#define V 10 // Max number of vertices

int minDistance(int dist[], int visited[], int n) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < n; v++)
        if (!visited[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    return min_index;
}

void dijkstra(int graph[V][V], int src, int n) {
    int dist[V];
    int visited[V];

    for (int i = 0; i < n; i++) {
        dist[i] = INT_MAX;
        visited[i] = 0;
    }

    dist[src] = 0;

    for (int count = 0; count < n - 1; count++) {
        int u = minDistance(dist, visited, n);
        visited[u] = 1;

        for (int v = 0; v < n; v++)
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX &&
                dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }

    printf("Vertex \t Distance from Source\n");
    for (int i = 0; i < n; i++)
        printf("%d \t\t %d\n", i, dist[i]);
}

int main() {
    int n;
    printf("Enter number of vertices: ");
    scanf("%d", &n);

    int graph[V][V];
    printf("Enter adjacency matrix (0 if no edge):\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);

    int src;
    printf("Enter source vertex: ");
    scanf("%d", &src);

    dijkstra(graph, src, n);

    return 0;
}
Q3
#include <stdio.h>

#define MAX 30

typedef struct {
    int u, v, w;
} Edge;

int parent[MAX];

int find(int i) {
    while (parent[i] != i)
        i = parent[i];
    return i;
}

void union_set(int i, int j) {
    int a = find(i);
    int b = find(j);
    parent[a] = b;
}

int main() {
    Edge edges[MAX];
    int n, e;

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter number of edges: ");
    scanf("%d", &e);

    printf("Enter edges (u v weight):\n");
    for (int i = 0; i < e; i++)
        scanf("%d %d %d", &edges[i].u, &edges[i].v, &edges[i].w);

    // Initialize parent
    for (int i = 0; i < n; i++)
        parent[i] = i;

    // Sort edges by weight
    for (int i = 0; i < e - 1; i++) {
        for (int j = 0; j < e - i - 1; j++) {
            if (edges[j].w > edges[j + 1].w) {
                Edge temp = edges[j];
                edges[j] = edges[j + 1];
                edges[j + 1] = temp;
            }
        }
    }

    printf("Minimum Spanning Tree:\n");
    int total_cost = 0;
    for (int i = 0; i < e; i++) {
        int u = edges[i].u;
        int v = edges[i].v;
        if (find(u) != find(v)) {
            printf("%d - %d : %d\n", u, v, edges[i].w);
            total_cost += edges[i].w;
            union_set(u, v);
        }
    }

    printf("Total cost: %d\n", total_cost);

    return 0;
}
